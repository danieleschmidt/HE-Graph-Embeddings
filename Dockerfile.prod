# Multi-stage production Dockerfile for HE-Graph-Embeddings
# Optimized for security, performance, and minimal attack surface

# ==================== BUILD STAGE ====================
FROM nvidia/cuda:12.2-devel-ubuntu22.04 as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    python3 \
    python3-dev \
    python3-pip \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for building
COPY requirements.txt /tmp/requirements.txt
RUN pip3 install --no-cache-dir -r /tmp/requirements.txt

# Copy source code
WORKDIR /app
COPY src/ src/
COPY CMakeLists.txt .
COPY setup.py .

# Build CUDA kernels
RUN mkdir build && cd build && \
    cmake .. -DCMAKE_CUDA_ARCHITECTURES="70;75;80;86;89;90" \
             -DCMAKE_BUILD_TYPE=Release \
             -DENABLE_OPTIMIZATIONS=ON \
             -DBUILD_TESTS=OFF && \
    make -j$(nproc)

# Build Python package
RUN pip3 install --no-deps -e .

# ==================== RUNTIME STAGE ====================
FROM nvidia/cuda:12.2-runtime-ubuntu22.04 as production

# Create non-root user
RUN groupadd -r hegraph && useradd -r -g hegraph -u 1001 hegraph

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install production Python packages
COPY requirements.txt /tmp/requirements.txt
RUN pip3 install --no-cache-dir -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

# Copy built artifacts from builder
WORKDIR /app
COPY --from=builder /app/build/lib* /usr/local/lib/
COPY --from=builder /app/src/ /app/src/
COPY --from=builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/

# Copy configuration and scripts
COPY config/ /app/config/
COPY scripts/entrypoint.sh /app/scripts/entrypoint.sh
COPY scripts/healthcheck.py /app/scripts/healthcheck.py

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/security-reports /tmp/cuda-cache && \
    chown -R hegraph:hegraph /app /tmp/cuda-cache

# Set environment variables
ENV PYTHONPATH=/app/src \
    CUDA_CACHE_PATH=/tmp/cuda-cache \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENV=production

# Security hardening
RUN chmod +x /app/scripts/entrypoint.sh && \
    chmod 755 /app/scripts/healthcheck.py

# Switch to non-root user
USER hegraph

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 /app/scripts/healthcheck.py

# Use entrypoint script
ENTRYPOINT ["/app/scripts/entrypoint.sh"]
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# ==================== SECURITY SCANNER STAGE ====================
FROM alpine:latest as security

RUN apk add --no-cache python3 py3-pip bash curl

WORKDIR /app

# Copy security scanning tools
COPY security/ /app/security/
COPY requirements-security.txt /tmp/requirements-security.txt

RUN pip3 install --no-cache-dir -r /tmp/requirements-security.txt

# Create security user
RUN addgroup -g 1001 security && \
    adduser -D -u 1001 -G security security

USER security

CMD ["python3", "/app/security/security_scanner.py", "--continuous"]

# ==================== METADATA ====================
LABEL maintainer="Daniel Schmidt <daniel@terragon.ai>" \
      version="2.0.0" \
      description="Production-ready HE-Graph-Embeddings with TERRAGON SDLC" \
      org.opencontainers.image.title="HE-Graph-Embeddings" \
      org.opencontainers.image.description="GPU-accelerated homomorphic graph neural networks" \
      org.opencontainers.image.version="2.0.0" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.source="https://github.com/danieleschmidt/HE-Graph-Embeddings"