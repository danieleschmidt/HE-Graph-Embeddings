name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly quality checks
    - cron: '0 2 * * *'

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'setup.py') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt
        
        # Install quality tools
        pip install pytest pytest-cov pytest-timeout pytest-benchmark
        pip install ruff black isort mypy
        pip install bandit safety
        pip install coverage[toml]
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run Quality Gates
      run: |
        python scripts/run_quality_gates.py \
          --project-root . \
          --output quality-report.json \
          --verbose
      continue-on-error: true
    
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-report-${{ matrix.python-version }}
        path: quality-report.json
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.json
          htmlcov/
    
    - name: Comment PR with Quality Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read quality report
          let report;
          try {
            const reportData = fs.readFileSync('quality-report.json', 'utf8');
            report = JSON.parse(reportData);
          } catch (error) {
            console.log('Could not read quality report');
            return;
          }
          
          // Format comment
          const status = report.overall_passed ? '✅ PASSED' : '❌ FAILED';
          const score = (report.overall_score * 100).toFixed(1);
          
          let comment = `## 🎯 Quality Gates Report - Python ${{ matrix.python-version }}\n\n`;
          comment += `**Overall Status:** ${status}\n`;
          comment += `**Overall Score:** ${score}/100\n`;
          comment += `**Gates Passed:** ${report.summary.passed_gates}/${report.summary.total_gates}\n\n`;
          
          comment += `### Gate Results\n\n`;
          comment += `| Gate | Status | Score | Duration |\n`;
          comment += `|------|--------|-------|----------|\n`;
          
          for (const gate of report.gate_results) {
            const gateStatus = gate.passed ? '✅' : '❌';
            const gateScore = (gate.score * 100).toFixed(1);
            const duration = gate.duration.toFixed(1);
            comment += `| ${gate.name} | ${gateStatus} | ${gateScore}/100 | ${duration}s |\n`;
          }
          
          if (report.summary.recommendations.length > 0) {
            comment += `\n### 💡 Recommendations\n\n`;
            for (const rec of report.summary.recommendations) {
              comment += `- ${rec}\n`;
            }
          }
          
          comment += `\n---\n*Generated by HE-Graph-Embeddings Quality Gates*`;
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  performance-baseline:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/performance/test_benchmarks.py \
          --benchmark-only \
          --benchmark-json=benchmark.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: HE-Graph-Embeddings Performance
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  coverage-report:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        path: coverage-artifacts/
    
    - name: Combine coverage reports
      run: |
        pip install coverage[toml]
        
        # Combine coverage from all Python versions
        for version_dir in coverage-artifacts/coverage-*/; do
          if [ -f "${version_dir}coverage.json" ]; then
            cp "${version_dir}coverage.json" "coverage-$(basename "$version_dir" | cut -d'-' -f2-).json"
          fi
        done
        
        # Generate combined report
        coverage combine coverage-*.json || echo "Could not combine coverage files"
        coverage report --show-missing || echo "Could not generate coverage report"
        coverage html || echo "Could not generate HTML coverage report"
    
    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.json
        fail_ci_if_error: false
        verbose: true

  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check deployment readiness
      run: |
        echo "🚀 Checking deployment readiness..."
        
        # Check that quality gates passed
        if [ ! -f quality-report.json ]; then
          echo "❌ Quality report not found"
          exit 1
        fi
        
        # Verify required files exist
        required_files=(
          "README.md"
          "setup.py"
          "requirements.txt"
          "SECURITY.md"
          "LICENSE"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          fi
        done
        
        echo "✅ Deployment readiness checks passed"
    
    - name: Create deployment tag
      if: success()
      run: |
        # Create a deployment-ready tag
        TAG="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag "$TAG"
        echo "Created deployment tag: $TAG"
        
        # In a real scenario, you would push this tag
        # git push origin "$TAG"

  notify-status:
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, performance-baseline, coverage-report]
    if: always()
    
    steps:
    - name: Notify team of quality gate status
      uses: actions/github-script@v6
      with:
        script: |
          const { context, github } = require('@actions/github');
          
          // Determine overall status
          const jobs = [
            '${{ needs.quality-gates.result }}',
            '${{ needs.security-scan.result }}',
            '${{ needs.performance-baseline.result }}',
            '${{ needs.coverage-report.result }}'
          ].filter(result => result !== '');
          
          const allPassed = jobs.every(result => result === 'success');
          const anyFailed = jobs.some(result => result === 'failure');
          
          let status, emoji;
          if (allPassed) {
            status = 'All quality gates passed ✅';
            emoji = '🎉';
          } else if (anyFailed) {
            status = 'Some quality gates failed ❌';
            emoji = '⚠️';
          } else {
            status = 'Quality gates completed with mixed results';
            emoji = '📊';
          }
          
          console.log(`${emoji} ${status}`);
          
          // In a real scenario, you might send notifications to Slack, email, etc.
          // For example:
          // await github.rest.issues.createComment({
          //   issue_number: context.issue.number,
          //   owner: context.repo.owner,
          //   repo: context.repo.repo,
          //   body: `${emoji} **Quality Gates Status:** ${status}`
          // });