version: '3.8'

services:
  # Main HE-Graph-Embeddings API service
  hegraph-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hegraph-api
    ports:
      - "8000:8000"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=production-key-${RANDOM_SEED:-12345}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - hegraph-network
    depends_on:
      - redis
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hegraph-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - hegraph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL database for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: hegraph-postgres
    environment:
      POSTGRES_DB: hegraph
      POSTGRES_USER: hegraph_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hegraph-network  
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hegraph_user -d hegraph"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hegraph-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - hegraph-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hegraph-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning:ro
    networks:
      - hegraph-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hegraph-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    networks:
      - hegraph-network
    depends_on:
      - hegraph-api
    restart: unless-stopped

  # Development environment
  hegraph-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hegraph-dev
    ports:
      - "8001:8000"
      - "5678:5678"  # debugpy port
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - API_KEY=dev-key-12345
      - DEVELOPMENT=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hegraph-network
    depends_on:
      - redis
    profiles:
      - dev
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Testing environment
  hegraph-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: hegraph-test
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=ERROR
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    networks:
      - hegraph-network
    profiles:
      - test
    command: ["python", "-m", "pytest", "tests/", "--cov=src", "--cov-report=html:test-results/coverage"]

  # Jupyter notebook for experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hegraph-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-development}
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    networks:
      - hegraph-network
    profiles:
      - dev
      - jupyter
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

networks:
  hegraph-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local