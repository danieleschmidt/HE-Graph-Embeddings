# Quantum Task Planner API - Production Docker Image
# Multi-stage build for optimal performance and security

# Stage 1: Build environment with quantum dependencies
FROM nvidia/cuda:11.8-devel-ubuntu22.04 AS builder

# Set quantum build arguments
ARG QUANTUM_OPTIMIZATION_LEVEL=3
ARG ENABLE_GPU_ACCELERATION=true
ARG BUILD_TARGET=production

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3-pip \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    pkg-config \
    libomp-dev \
    libopenmpi-dev \
    libhwloc-dev \
    libnuma-dev \
    libssl-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# Set Python environment
ENV PYTHONPATH="/app/src:$PYTHONPATH"
ENV PYTHON_UNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-quantum.txt requirements-prod.txt ./

# Install Python dependencies with quantum optimizations
RUN pip3 install --upgrade pip setuptools wheel && \
    pip3 install -r requirements.txt && \
    pip3 install -r requirements-quantum.txt && \
    pip3 install -r requirements-prod.txt

# Install PyTorch with CUDA support
RUN pip3 install torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2 \
    --extra-index-url https://download.pytorch.org/whl/cu118

# Install quantum computing libraries
RUN pip3 install \
    qiskit==0.44.1 \
    cirq==1.2.0 \
    pennylane==0.32.0 \
    pennylane-lightning[gpu]==0.32.0

# Copy source code
COPY src/ ./src/
COPY tests/ ./tests/
COPY setup.py ./

# Install the package
RUN pip3 install -e .

# Compile CUDA kernels for quantum operations
COPY src/cuda/ ./cuda/
RUN if [ "$ENABLE_GPU_ACCELERATION" = "true" ]; then \
        cd cuda && \
        nvcc -O3 -arch=sm_75 -gencode=arch=compute_75,code=sm_75 \
             -gencode=arch=compute_80,code=sm_80 \
             -gencode=arch=compute_86,code=sm_86 \
             -shared -Xcompiler -fPIC \
             -o libquantum_kernels.so *.cu; \
    fi

# Stage 2: Production runtime image
FROM nvidia/cuda:11.8-runtime-ubuntu22.04 AS production

# Set quantum runtime arguments
ARG QUANTUM_OPTIMIZATION_LEVEL=3
ARG ENABLE_GPU_ACCELERATION=true

# Labels for image metadata
LABEL maintainer="Daniel Schmidt <daniel@terragonlabs.ai>" \
      version="1.0.0" \
      description="Quantum Task Planner API with Privacy-Preserving Graph Intelligence" \
      org.opencontainers.image.title="Quantum Task Planner API" \
      org.opencontainers.image.description="Production API for quantum-inspired task scheduling" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.licenses="Apache-2.0" \
      quantum.optimization.level="3" \
      quantum.gpu.enabled="true" \
      privacy.encryption="homomorphic"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-pip \
    curl \
    wget \
    htop \
    iotop \
    nethogs \
    dumb-init \
    gosu \
    libomp5 \
    libopenmpi3 \
    libhwloc15 \
    libnuma1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r quantum --gid=1000 && \
    useradd -r -g quantum --uid=1000 --home-dir=/app --shell=/bin/bash quantum && \
    mkdir -p /app && \
    chown -R quantum:quantum /app

# Set environment variables
ENV PYTHONPATH="/app/src:$PYTHONPATH" \
    PYTHON_UNBUFFERED=1 \
    QUANTUM_OPTIMIZATION_LEVEL=$QUANTUM_OPTIMIZATION_LEVEL \
    QUANTUM_GPU_ENABLED=$ENABLE_GPU_ACCELERATION \
    CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \
    PATH=/usr/local/cuda/bin:$PATH \
    OMP_NUM_THREADS=8 \
    MKL_NUM_THREADS=8 \
    OPENBLAS_NUM_THREADS=8 \
    MALLOC_ARENA_MAX=4 \
    MALLOC_MMAP_THRESHOLD_=1048576

# Copy built application from builder stage
COPY --from=builder --chown=quantum:quantum /app /app
COPY --from=builder --chown=quantum:quantum /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages

# Copy compiled CUDA kernels if GPU acceleration is enabled
RUN if [ "$ENABLE_GPU_ACCELERATION" = "true" ]; then \
        mkdir -p /app/lib && \
        if [ -f /app/cuda/libquantum_kernels.so ]; then \
            cp /app/cuda/libquantum_kernels.so /app/lib/; \
        fi; \
    fi

# Set working directory
WORKDIR /app

# Create directories for logs, data, and temporary files
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R quantum:quantum /app/logs /app/data /app/tmp

# Copy startup scripts
COPY deployment/quantum-planner/docker/scripts/start-api.sh /usr/local/bin/
COPY deployment/quantum-planner/docker/scripts/health-check.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/start-api.sh /usr/local/bin/health-check.sh

# Copy configuration files
COPY deployment/quantum-planner/config/ ./config/

# Set up quantum optimization based on level
RUN if [ "$QUANTUM_OPTIMIZATION_LEVEL" -ge "2" ]; then \
        # CPU optimization
        echo 'performance' > /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor 2>/dev/null || true; \
    fi && \
    if [ "$QUANTUM_OPTIMIZATION_LEVEL" -ge "3" ]; then \
        # Memory optimization
        echo 1 > /proc/sys/vm/overcommit_memory 2>/dev/null || true; \
        echo 10 > /proc/sys/vm/swappiness 2>/dev/null || true; \
    fi

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Expose ports
EXPOSE 8000 9090 9091

# Set resource limits
LABEL resource.cpu.request="500m" \
      resource.cpu.limit="2000m" \
      resource.memory.request="1Gi" \
      resource.memory.limit="4Gi" \
      resource.gpu.limit="1"

# Switch to non-root user
USER quantum

# Volume for persistent data
VOLUME ["/app/data", "/app/logs"]

# Default command
ENTRYPOINT ["dumb-init", "--"]
CMD ["/usr/local/bin/start-api.sh"]

# Stage 3: Development image (optional)
FROM production AS development

USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    git \
    sqlite3 \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
COPY requirements-dev.txt ./
RUN pip3 install -r requirements-dev.txt

# Install debugging tools
RUN pip3 install \
    pytest-xdist \
    pytest-cov \
    pytest-benchmark \
    black \
    ruff \
    mypy \
    ipython \
    jupyter \
    line_profiler \
    memory_profiler

# Switch back to quantum user
USER quantum

# Override entrypoint for development
ENTRYPOINT ["dumb-init", "--"]
CMD ["python3", "-m", "src.api.main", "--dev", "--reload"]

# Stage 4: Testing image
FROM builder AS testing

# Install test dependencies
COPY requirements-test.txt ./
RUN pip3 install -r requirements-test.txt

# Copy test configuration
COPY tests/ ./tests/
COPY pytest.ini ./
COPY .coveragerc ./

# Set environment for testing
ENV PYTEST_CURRENT_TEST=""
ENV TESTING=true

# Run tests by default
CMD ["python3", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html", "--cov-report=term"]

# Build arguments for multi-target builds
ARG BUILD_TARGET=production
FROM ${BUILD_TARGET} AS final